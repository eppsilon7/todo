"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const deprecation_1 = require("deprecation");
const get_router_1 = require("./get-router");
const resolve_app_function_1 = require("./helpers/resolve-app-function");
let didDeprecateApp = false;
let didDeprecateRouter = false;
/**
 * Loads an ApplicationFunction into the current Application
 * @param appFn - Probot application function to load
 */
async function load(app, router, appFn) {
    const boundGetRouter = get_router_1.getRouter.bind(null, router || app.router);
    if (!("app" in app)) {
        Object.defineProperty(app, "app", {
            get() {
                if (didDeprecateApp)
                    return app;
                app.log.warn(new deprecation_1.Deprecation('[probot] "({ app }) => {}" is deprecated (sorry!). We reverted back to the previous API "(app) => {}", see reasoning at https://github.com/probot/probot/issues/1286#issuecomment-744094299'));
                didDeprecateApp = true;
                return app;
            },
        });
        Object.defineProperty(app, "getRouter", {
            get() {
                if (didDeprecateRouter)
                    return boundGetRouter;
                app.log.warn(new deprecation_1.Deprecation('[probot] "({ app, getRouter }) => {}" is deprecated. Use "(app, { getRouter }) => {}" instead'));
                didDeprecateRouter = true;
                return boundGetRouter;
            },
        });
    }
    if (Array.isArray(appFn)) {
        for (const fn of appFn) {
            await load(app, router, fn);
        }
        return app;
    }
    const fn = typeof appFn === "string" ? resolve_app_function_1.resolveAppFunction(appFn) : appFn;
    await fn(app, { getRouter: boundGetRouter });
    return app;
}
exports.load = load;
//# sourceMappingURL=load.js.map